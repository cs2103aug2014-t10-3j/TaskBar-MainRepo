//@author: a0111499b



	/**
	 * origin: src\storage\ReadFileJDOM.java
	 */

/**
* ReadFileJDOM reads the file from a XML file. 
*
*/
package storage;

import java.io.File;

import java.io.IOException;

 
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.jdom2.input.DOMBuilder;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
public class ReadFileJDOM {
	
	/**
	 * Get JDOM document from DOM Parser
	 * 
	 */
    protected static org.jdom2.Document useDOMParser(String fileName)
            throws ParserConfigurationException, SAXException, IOException {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder;
        dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(new File(fileName));
        DOMBuilder domBuilder = new DOMBuilder();
        return domBuilder.build(doc);
 
    }
}

	// End of segment: src\storage\ReadFileJDOM.java





	/**
	 * origin: src\storage\Storage.java
	 */

* Zi Jie
*
*/
package storage;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import org.jdom2.Element;

import util.Logging;
import util.Task;

public class Storage {

	private ArrayList<Task> allTasks;
	private static Storage storage;

	/**
	 * Constructor for the class. Since Singleton pattern is applied, this
	 * constructor is made private access.
	 */
	private Storage() throws IOException {
		try {
			allTasks = new ArrayList<Task>();
			readFile();
			Logging.getInstance().info("Reading of File Successful");

		} catch (Exception e) {
			Logging.getInstance().warning("Reading of File failed, File might be Corrupted");
			throw new IOException();
		}
	}

	/**
	 * This method reinforce the Singleton pattern for class Storage, which
	 * means each time the software is run, there should be only one instance of
	 * class Storage.
	 * 
	 * @return The static storage instance.
	 * @throws IOException 
	 */
	public static Storage getInstance() throws IOException {
		if (storage == null) {
			storage = new Storage();
		}
		return storage;
	}

	/**
	 * Method returns all tasks that are not done
	 * 
	 */
	public ArrayList<Task> getAllNotDoneTasks() {
		ArrayList<Task> result = new ArrayList<Task>();
		for (Task t : allTasks) {
			if (!t.isDone()) {
				result.add(t);
			}
		}
		sortByTime(result);
		return result;
	}
	
	/**
	 * Method returns all tasks that are done
	 * 
	 */
	public ArrayList<Task> getAllDoneTasks() {
		ArrayList<Task> result = new ArrayList<Task>();
		for (Task t : allTasks) {
			if (t.isDone()) {
				result.add(t);
			}
		}
		sortByTime(result);
		return result;
	}

	/**
	 * Method returns all tasks with the keyword
	 * 
	 */
	public ArrayList<Task> getTaskByKeyword(String keyWord) {

		ArrayList<Task> searchedTasks = new ArrayList<Task>();

		outer: for (Task t : allTasks) {
			if (!t.isDone()
					&& t.getDescription().toLowerCase()
							.contains(keyWord.toLowerCase())) {
				searchedTasks.add(t);
			}
			if (!t.isDone() && !t.getLabels().isEmpty()) {
				ArrayList<String> labels = t.getLabels();
				for (String l : labels) {
					if (l.contains(keyWord.toLowerCase())) {
						if(searchedTasks.contains(t)){
							continue outer;
						}
						searchedTasks.add(t);
					}
				}
			}
		}
		sortByTime(searchedTasks);
		return searchedTasks;
	}
	
	/**
	 * Method returns all tasks that contains the label
	 * 
	 */
	public ArrayList<Task> getTaskByLabel(String parameter) {
		ArrayList<Task> result = new ArrayList<Task>();
		outer: for (Task t : allTasks) {
			if (!t.isDone() && !t.getLabels().isEmpty()) {
				ArrayList<String> labels = t.getLabels();
				for (String l : labels) {
					if (l.contains(parameter.toLowerCase())) {
						if(result.contains(t)){
							continue outer;
						}
						result.add(t);
					}
				}
			}
		}
		sortByTime(result);
		return result;
	}
	
	/**
	 * Method returns all tasks that are on the given date
	 * 
	 */
	public ArrayList<Task> getTasksOnADate(LocalDate referenceDate) {
		ArrayList<Task> result = new ArrayList<Task>();

		for (Task t : allTasks) {
			if (!t.isFloatingTask()) {
				if (t.isDeadLineTask()) {
					if (t.getDeadline().toLocalDate().equals(referenceDate)) {
						result.add(t);
					}
				} else if (t.isEvent()) {
					if (t.getStartTime().toLocalDate().compareTo(referenceDate) <= 0
							&& t.getEndTime().toLocalDate()
									.compareTo(referenceDate) >= 0) {
						result.add(t);
					}
				}
			}
		}
		sortByTime(result);
		return result;
	}
	
	/**
	 * Method returns all tasks that are does not have timeStamps
	 * timeStamp1 = null, timeStamp2 = null
	 * 
	 */
	public ArrayList<Task> getFloatingTasks() {
		ArrayList<Task> result = new ArrayList<Task>();
		for (Task t : allTasks) {
			if (!t.isDone() && t.isFloatingTask()) {
				result.add(t);
			}
		}
		sortByTime(result);
		return result;
	}
	
	/**
	 * Method add Task to arrayList
	 * 
	 */
	public void addTask(Task taskFromLogic) {
		try {
			assert !allTasks.contains(taskFromLogic);
			allTasks.add(taskFromLogic);
			writeFile();
		} catch (Exception e) {
			Logging.getInstance().warning("Writing of File UnSuccessful");
		}
	}
	/**
	 * Method delete given Task from arrayList
	 * 
	 */
	public void deleteTask(Task task) {
		try {
			assert allTasks.contains(task);
			allTasks.remove(task);
			writeFile();
		} catch (Exception e) {
			Logging.getInstance().warning("Writing of File UnSuccessful when deleting");;
		}
	}
	
	/**
	* for testing purposes. Returns task that is deleted
	*Else, it is the same as deleteTask(Task)
	*/
	public Task testdeleteTask(Task task) {
		try {
			assert allTasks.contains(task);
			allTasks.remove(task);
			writeFile();
			return task;
		} catch (Exception e) {
			Logging.getInstance().warning("Writing of File UnSuccessful when deleting");;
		}
		return null;
	}
	
	/**
	 * Method marks a Task as done
	 * 
	 */
	public void completeTask(Task task) {
		try {
			assert allTasks.contains(task);
			task.setDone(true);
			writeFile();
		} catch (Exception e) {
			Logging.getInstance().warning("Writing of File UnSuccessful when completing");;
		}
	}
	
	/**
	 * Method marks a task as undone
	 * 
	 */
	public void uncompleteTask(Task task) {
		try {
			assert allTasks.contains(task);
			task.setDone(false);
			writeFile();
		} catch (Exception e) {
			Logging.getInstance().warning("Writing of File UnSuccessful when uncompleting");;
		}
	}

	/**
	 * Method sorts the arraylist by time using bubblesort
	 * 
	 */
	public void sortByTime(ArrayList<Task> list) {
		boolean swapped = true;
		int j = 0;
		Task tmp;
		while (swapped) {
			swapped = false;
			j++;
			for (int i = 0; i < list.size() - j; i++) {
				try {
					if (list.get(i).getDeadline()
							.isAfter(list.get(i + 1).getDeadline())) {
						tmp = list.get(i);
						list.set(i, list.get(i + 1));
						list.set(i + 1, tmp);
						swapped = true;
					}
				} catch (NullPointerException e) {
					if (list.get(i).isFloatingTask() && !list.get(i + 1).isFloatingTask()) {
						tmp = list.get(i);
						list.set(i, list.get(i + 1));
						list.set(i + 1, tmp);
						swapped = true;
					}
				}
			}
		}
	}

	
	/**
	 * Method writes ArrayList of Tasks into XML file: ETtasks.xml
	 * 
	 */
	public void writeFile() throws IOException {
		String fileName = "ETtasks.xml";
		WriteFileJDOM.writeFileUsingJDOM(allTasks, fileName);
	}
	
	/**
	 * Method reads XML file: ETtasks.xml into an ArrayList of task
	 * 
	 */
	public void readFile() {
		final String fileName = "ETtasks.xml";
		org.jdom2.Document jdomDoc;
		try {
			// we can create JDOM Document from DOM, SAX and STAX Parser Builder
			// classes
			jdomDoc = ReadFileJDOM.useDOMParser(fileName);
			Logging.getInstance().info("Reading of File Successful");
			Element root = jdomDoc.getRootElement();
			List<Element> taskListElements = root.getChildren("Task");
			DateTimeFormatter formatter = DateTimeFormatter
					.ofPattern("yyyy-MM-dd HH:mm");

			for (Element taskElement : taskListElements) {
				Task task1 = new Task();
				task1.setDescription(taskElement.getChildText("Description"));

				if (taskElement.getChildText("IsDone").equals("true")) {
					task1.setDone(true);
				} else if (taskElement.getChildText("IsDone").equals("false")) {
					task1.setDone(false);
				}

				int i = 0;
				ArrayList<String> labels = new ArrayList<String>();
				while ((taskElement.getChildText("Label" + i)) != null) {
					labels.add(taskElement.getChildText("Label" + i));
					i++;
				}
				task1.setLabels(labels);

				if (taskElement.getChildText("TimeStamp1") != "") {
					task1.setDeadline(LocalDateTime.parse(
							taskElement.getChildText("TimeStamp1"), formatter));
				} else {
					task1.setDeadline(null);
				}

				if (taskElement.getChildText("TimeStamp2") != "") {
					task1.setEndTime(LocalDateTime.parse(
							taskElement.getChildText("TimeStamp2"), formatter));
				} else {
					task1.setEndTime(null);
				}

				allTasks.add(task1);

			}
		} catch (FileNotFoundException e) {
			allTasks = new ArrayList<Task>();
		} catch (Exception e) {
			Logging.getInstance().warning("File might be Corrupted. Reading UnSuccessful");
		}
		
	}
}

	// End of segment: src\storage\Storage.java





	/**
	 * origin: src\storage\WriteFileJDOM.java
	 */

/**
* ReadFileJDOM writes the arraylist of tasks to a XML file: ETtasks.xml 
*
*/
package storage;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.output.Format;
import org.jdom2.output.XMLOutputter;

import util.Task;

public class WriteFileJDOM {
	/**
	 * Method writes file into XML file.
	 * 
	 */
	protected static void writeFileUsingJDOM(ArrayList<Task> taskList,
			String fileName) throws IOException {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
		Document doc = new Document();
		doc.setRootElement(new Element("tasks"));
		for (Task task : taskList) {
			Element tasks = new Element("Task");
			tasks.addContent(new Element("Description").setText(task
					.getDescription()));
			
			
			if(task.isDone()){
				tasks.addContent(new Element("IsDone").setText("true"));
			}else{
				tasks.addContent(new Element("IsDone").setText("false"));
			}
			
			ArrayList<String> labels = task.getLabels();
			for(int i=0 ; i < task.getNumLabels(); i++){
				Element labs = new Element("Label" + i);
				tasks.addContent(labs);
				labs.setText(labels.get(i));
			}

			if (task.getDeadline()!=null) {
				tasks.addContent(new Element("TimeStamp1").setText(task
						.getStartTime().format(formatter)));
			} else {
				tasks.addContent(new Element("TimeStamp1").setText(""));
			}

			if (task.getEndTime()!=null) {
				tasks.addContent(new Element("TimeStamp2").setText(task
						.getEndTime().format(formatter)));
			} else {
				tasks.addContent(new Element("TimeStamp2").setText(""));
			}
			doc.getRootElement().addContent(tasks);

		}
		// JDOM document is ready now, lets write it to file now
		XMLOutputter xmlOutputter = new XMLOutputter(Format.getPrettyFormat());
		// output xml to console for debugging
		//xmlOutputter.output(doc, System.out);
		xmlOutputter.output(doc, new FileOutputStream(fileName));
	}

}
	// End of segment: src\storage\WriteFileJDOM.java





	/**
	 * origin: test\storage\WriteReadTest.java
	 */

package storage;

import static org.junit.Assert.*;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import org.junit.Test;

import storage.Storage;
import util.Task;

public class WriteReadTest {
	/**
	 * Methods tested:
	 * readFile()
	 * writeFile()
	 * addTask(Task)
	 * deleteTask(Task)
	 */
	@Test
	public void testWrite() throws IOException {

		// time task. DATE with HH:MM to HH::MM
		// 2 labels #sleep, #wake up
		Storage storage = Storage.getInstance();
		Task task1 = new Task();
		task1.setDescription("testing1");
		ArrayList<String> labels = new ArrayList<String>();
		labels.add("testlabel1");
		labels.add("test label2");
		task1.setLabels(labels);
		String str = "1986-04-08 09:30";
		String str1 = "1986-04-08 12:59";
		DateTimeFormatter formatter = DateTimeFormatter
				.ofPattern("yyyy-MM-dd HH:mm");
		LocalDateTime dateTime1 = LocalDateTime.parse(str, formatter);
		LocalDateTime dateTime2 = LocalDateTime.parse(str1, formatter);
		task1.setStartTime(dateTime1);
		task1.setEndTime(dateTime2);
		storage.addTask(task1);
		
		// Floating Task
		Task task2 = new Task();
		task2.setDescription("testing2");
		storage.addTask(task2);
		
		// Tasks should be added in correctly into the XML file
	}

	@Test
	public void testRead() throws IOException {
		Storage storage = Storage.getInstance();
		ArrayList<Task> list = storage.getAllNotDoneTasks();
		Task task1 = list.get(list.size() - 2);
		Task task2 = list.get(list.size() - 1);

		// Task1
		Task testtask1 = new Task();
		testtask1.setDescription("testing1");
		ArrayList<String> labels = new ArrayList<String>();
		labels.add("testlabel1");
		labels.add("test label2");
		testtask1.setLabels(labels);
		String str = "1986-04-08 09:30";
		String str1 = "1986-04-08 12:59";
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
		LocalDateTime dateTime1 = LocalDateTime.parse(str, formatter);
		LocalDateTime dateTime2 = LocalDateTime.parse(str1, formatter);
		testtask1.setStartTime(dateTime1);
		testtask1.setEndTime(dateTime2);

		// Task2
		Task testtask2 = new Task();
		testtask2.setDescription("testing2");
		
		// Deletes the task that we added in for testing
		// If passes test, means it is written in and read out correctly such
		// that it is able to detect and delete
		// the task added.
		assertEquals("Check whether Task1 is written and read in correctly",storage.testdeleteTask(task1).toString(), testtask1.toString());
		assertEquals("Check whether Task2 is written and read in correctly",storage.testdeleteTask(task2).toString(), testtask2.toString());
	}
}

	// End of segment: test\storage\WriteReadTest.java





